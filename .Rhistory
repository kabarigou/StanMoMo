devtools::install(quick=TRUE)
library(devtools)
install.packages(ellipsis)
install.packages("ellipsis")
devtools::install(quick=TRUE)
.libPaths()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install(quick=TRUE)
library(StanMoMo)
pkgdown::build_site(new_process = TRUE)
pkgdown::build_site(new_process = FALSE)
pkgdown::build_site(new_process = FALSE)
devtools::build_vignettes()
rmarkdown::render('StanMoMo.Rmd')
rmarkdown::render('StanMoMo.Rmd')
pkgdown::build_articles(
pkg = ".",
quiet = TRUE,
lazy = TRUE,
override = list(),
preview = NA
)
devtools::build_vignettes()
.Last.error.trace
rmarkdown::render(input = "./vignettes/StanMoMo.Rmd")
pkgdown::build_site()
library(StanMoMo)
ages.fit<-50:90
years.fit<-1970:2017
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",chains=2,cores=2)
#' \dontrun{
#' years <- 1980:2018
#' ages <- 50:90
#' death <- load_HMD_data('BEL', 'Deaths_1x1', years, ages, "Male")$mat
#' exposure <- load_HMD_data('BEL', 'Exposures_1x1', years, ages, "Male")$mat
#' fitLC<-lc_stan(death = deathFR,exposure=exposureFR, forecast = 10,
#' family = "poisson",chains=1,cores=1)
#' forecasting_plot(fitLC,ages,years,death,exposure,c(65,75,85))
#' }
#'
forecasting_plot <- function(stan_fit, ages, years,death, exposure,ages.plot){
Age <- Obs <- Year <- NULL
params<-rstan::extract(stan_fit)
nforecast<-ncol(params$k_p)
years.predict<-seq(years[length(years)]+1,years[length(years)]+nforecast,by=1)
pred<-array(params$mufor,dim=list(nrow(params$mufor),ncol(params$mufor)/nforecast,nforecast),
dimnames = list(c(1:nrow(params$mufor)),formatC(ages),formatC(years.predict)))
pred<-as.data.frame.table(pred)
colnames(pred)<-c("Sim","Age","Year","Obs")
pred$Age <-as.numeric(as.character(pred$Age))
pred$Year <-as.numeric(as.character(pred$Year))
qxt <- death / exposure
qxt<-as.data.frame.table(qxt)
colnames(qxt)<-c("Age","Year","Obs")
qxt$Age <-as.numeric(as.character(qxt$Age))
qxt$Year <-as.numeric(as.character(qxt$Year))
years<-c(years,years.predict)
ggplot2::ggplot()+
ggplot2::geom_point(data=subset(qxt,Age %in% ages.plot & Year %in% years),ggplot2::aes(x=Year,y=Obs,shape=as.factor(Age)))+
ggplot2::scale_y_log10()+
ggfan::geom_fan(data = subset(pred,Age %in% ages.plot &Year %in% years),ggplot2::aes(x=Year,y=Obs,group=Age))+
ggplot2::theme_bw()+
ggplot2::scale_fill_distiller(palette="Spectral")+
ggplot2::labs(y="death rate (log scale)", x="Year",shape="Age")
}
#' \dontrun{
#' years <- 1980:2018
#' ages <- 50:90
#' death <- load_HMD_data('BEL', 'Deaths_1x1', years, ages, "Male")$mat
#' exposure <- load_HMD_data('BEL', 'Exposures_1x1', years, ages, "Male")$mat
#' fitLC<-lc_stan(death = deathFR,exposure=exposureFR, forecast = 10,
#' family = "poisson",chains=1,cores=1)
#' forecasting_plot(fitLC,ages,years,death,exposure,c(65,75,85))
#' }
#'
forecasting_plot_bis <- function(stan_fit, ages, years,death, exposure,ages.plot){
Age <- Obs <- Year <- NULL
params<-rstan::extract(stan_fit)
nforecast<-ncol(params$k_p)
years.predict<-seq(years[length(years)]+1,years[length(years)]+nforecast,by=1)
pred<-array(params$mufor,dim=list(nrow(params$mufor),ncol(params$mufor)/nforecast,nforecast),
dimnames = list(c(1:nrow(params$mufor)),formatC(ages),formatC(years.predict)))
pred<-as.data.frame.table(pred)
colnames(pred)<-c("Sim","Age","Year","Obs")
pred$Age <-as.numeric(as.character(pred$Age))
pred$Year <-as.numeric(as.character(pred$Year))
qxt <- death / exposure
qxt<-as.data.frame.table(qxt)
colnames(qxt)<-c("Age","Year","Obs")
qxt$Age <-as.numeric(as.character(qxt$Age))
qxt$Year <-as.numeric(as.character(qxt$Year))
years<-c(years,years.predict)
ggplot2::ggplot()+
ggplot2::geom_point(data=subset(qxt,Age %in% ages.plot & Year %in% years),ggplot2::aes(x=Year,y=Obs,shape=as.factor(Age)))+
ggplot2::scale_y_log10()+
ggfan::geom_fan(data = subset(pred,Age %in% ages.plot &Year %in% years),ggplot2::aes(x=Year,y=Obs,group=Age))+
ggplot2::theme_bw()+
ggplot2::scale_fill_distiller(palette="Spectral")+
ggplot2::labs(y="death rate (log scale)", x="Year",shape="Age")
}
forecasting_plot_bis(fitLC,ages.fit,years.fit,deathFR,exposureFR,c(65,75,85))
devtools::build_manual(pkg = ".", path = NULL)
devtools::build_manual(pkg = ".", path = NULL)
devtools::build_manual()
devtools::build_manual(pkg = ".", path = NULL)
devtools::build_manual()
devtools::document(".")
devtools::build_manual()
.Last.value
devtools::build_manual()
traceback()
devtools::build_manual()
roxygen2::roxygenize()
devtools::build_manual()
roxygen2::roxygenize()
devtools::build_manual()
roxygen2::roxygenize()
devtools::build_manual()
library(tidyverse)
check_man <- function(){
man_files <- list.files("man", full.names = T)
dir.create("man_backup", showWarnings = F)
file.copy(man_files, "man_backup")
unlink(man_files)
n_man_file <- list.files("man_backup", full.names = T)
tp <- tempdir()
for_a_man <- function(mn){
cat("Checking: ", basename(mn))
file.copy(mn, "man")
devtools::build_manual(path = tp)
chk <- length(list.files(tp, ".pdf$")) > 0
d0 <- tibble(man_file = basename(mn), test = chk)
unlink(list.files(tp, ".pdf$", full.names = T))
unlink(list.files("man", full.names = T))
cat(" ... Done!", ifelse(chk, "ok","issues"),"\n")
d0
}
all_checks <- n_man_file %>% map_df(for_a_man)
file.copy(n_man_file, "man")
unlink(tp, recursive = T)
unlink("man_backup", recursive = T)
all_checks
}
check_man()
check_man()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual(pkg = ".", path = NULL)
devtools::build_manual()
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Users/Karim Barigou/AppData/Local/Programs/MiKTeX/miktex/bin/x64",sep=";"))
Sys.which("pdflatex")
devtools::build_manual()
devtools::build_manual()
Sys.getenv("GIT_ASKPASS")
Sys.getenv("SSH_ASKPASS")
usethis::use_cran_comments()
pkgdown::build_site()
.Last.error.trace
install.packages("StanMoMo")
install.packages("StanMoMo",repos=c("https://cloud.r-project.org",
"https://kabarigou.github.io/drat"),type = "binary",dependencies = TRUE)
pkgdown::build_site()
pkgdown::build_site()
.Last.error.trac
.Last.error.trace
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site(new_process = FALSE)
install.packages("pkgdown")
install.packages("pkgdown")
pkgdown::build_site()
.Last.error.trace
pkgdown::build_site()
pkgdown::build_site(examples = FALSE)
.Last.error.trace
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown ::build_site(examples = FALSE)
.Last.error.trace
